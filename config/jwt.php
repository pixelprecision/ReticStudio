<?php
	// config/jwt.php
	
	return [
		/*
		|--------------------------------------------------------------------------
		| JWT Authentication Secret
		|--------------------------------------------------------------------------
		|
		| JWT Authentication Secret is used to sign and verify the tokens.
		| A random string is generated by the 'jwt:secret' artisan command.
		| This will be used to sign your tokens.
		|
		*/
		'secret' => env('JWT_SECRET'),
		
		/*
		|--------------------------------------------------------------------------
		| JWT Time To Live
		|--------------------------------------------------------------------------
		|
		| This option controls the default JWT "time to live" (TTL).
		| This is the number of minutes your token will be valid for.
		| Default: 60 (1 hour)
		|
		*/
		'ttl' => env('JWT_TTL', 20160),
		
		/*
		|--------------------------------------------------------------------------
		| Refresh Token Time To Live
		|--------------------------------------------------------------------------
		|
		| This option controls the default JWT refresh "time to live" (TTL).
		| This is the number of minutes until a refresh token expires.
		| Default: 20160 (2 weeks)
		|
		*/
		'refresh_ttl' => env('JWT_REFRESH_TTL', 20160),
		
		/*
		|--------------------------------------------------------------------------
		| JWT hashing algorithm
		|--------------------------------------------------------------------------
		|
		| Specify the hashing algorithm that will be used to sign the token.
		| Possible options: 'HS256', 'HS384', 'HS512', 'RS256', 'RS384', 'RS512'
		| Default: HS256
		|
		*/
		'algo' => env('JWT_ALGO', 'HS256'),
		
		/*
		|--------------------------------------------------------------------------
		| Required Claims
		|--------------------------------------------------------------------------
		|
		| Specify the required claims that must exist in any token.
		| A TokenInvalidException will be thrown if any of these claims are not
		| present in the payload.
		|
		*/
		'required_claims' => [
			'iss',
			'iat',
			'exp',
			'nbf',
			'sub',
			'jti',
		],
		
		/*
		|--------------------------------------------------------------------------
		| Persistent Claims
		|--------------------------------------------------------------------------
		|
		| Specify the claim keys to be persisted when refreshing a token.
		| 'sub' and 'iat' will automatically be persisted, in
		| addition to the these claims.
		|
		*/
		'persistent_claims' => [
			// 'foo',
			// 'bar',
		],
		
		/*
		|--------------------------------------------------------------------------
		| Lock Subject
		|--------------------------------------------------------------------------
		|
		| This will determine whether a `prv` claim is automatically added to
		| the token. The purpose of this is to ensure that if you have multiple
		| authentication models e.g. `App\User` & `App\OtherPerson`, then we
		| should prevent one authentication request from impersonating another,
		| if 2 tokens happen to have the same id across the 2 different models.
		|
		| Under specific circumstances, you may want to disable this behaviour
		| e.g. if you only have one authentication model, then you would save
		| a little on token size.
		|
		*/
		'lock_subject' => true,
		
		/*
		|--------------------------------------------------------------------------
		| Leeway
		|--------------------------------------------------------------------------
		|
		| This option allows you to define the amount of seconds that the token
		| can be expired for before it is actually considered invalid.
		| Default: 0 (no leeway)
		|
		*/
		'leeway' => env('JWT_LEEWAY', 0),
		
		/*
		|--------------------------------------------------------------------------
		| Blacklist Enabled
		|--------------------------------------------------------------------------
		|
		| In order to invalidate tokens, you must have this feature enabled.
		| If you do not want or need this functionality, then set this to false.
		|
		*/
		'blacklist_enabled' => env('JWT_BLACKLIST_ENABLED', true),
		
		/*
		|--------------------------------------------------------------------------
		| Blacklist Grace Period
		|--------------------------------------------------------------------------
		|
		| When multiple concurrent requests are made with the same JWT,
		| it is possible that some of them fail, due to token regeneration
		| on every request.
		|
		| Set grace period in seconds to prevent parallel request failure.
		|
		*/
		'blacklist_grace_period' => env('JWT_BLACKLIST_GRACE_PERIOD', 0),
		
		/*
		|--------------------------------------------------------------------------
		| Cookies encryption
		|--------------------------------------------------------------------------
		|
		| By default we will not encrypt cookies. If you want to enable
		| cookies encryption, set this to true.
		|
		*/
		'encrypt_cookies' => false,
		
		/*
		|--------------------------------------------------------------------------
		| Providers
		|--------------------------------------------------------------------------
		|
		| Specify the various providers used throughout the package.
		|
		*/
		'providers' => [
			/*
			|--------------------------------------------------------------------------
			| JWT Provider
			|--------------------------------------------------------------------------
			|
			| Specify the provider that is used to create and decode the tokens.
			|
			*/
			'jwt' => PHPOpenSourceSaver\JWTAuth\Providers\JWT\Lcobucci::class,
			
			/*
			|--------------------------------------------------------------------------
			| Authentication Provider
			|--------------------------------------------------------------------------
			|
			| Specify the provider that is used to authenticate users.
			|
			*/
			'auth' => PHPOpenSourceSaver\JWTAuth\Providers\Auth\Illuminate::class,
			
			/*
			|--------------------------------------------------------------------------
			| Storage Provider
			|--------------------------------------------------------------------------
			|
			| Specify the provider that is used to store tokens in the blacklist.
			|
			*/
			'storage' => PHPOpenSourceSaver\JWTAuth\Providers\Storage\Illuminate::class,
		],
	];
